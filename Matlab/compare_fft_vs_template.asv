% a function to take K templates from a randomly generated randn(m,n,k)
% function and try to find the overlapped count between fft and template
% method given the specific numeber of temolates.

% written by Amy on 09/25/2025

function result = compare_fft_vs_template(K, topJ, seed)
%COMPARE_FFT_VS_TEMPLATE  Run FFT vs. Template match and measure Top-J overlap.
%
% result = compare_fft_vs_template(K, topJ, seed)
%    K     : number of templates in the bank (template size m*n*K)
%    topJ  : size of the Top-J lists to compare number of overlap images
%    seed  : RNG seed for reproducibility of randn() (default: 42)
%
% Returns a struct:
%   .idx_topJ_fft, .shifts_topJ_fft, .t_fft
%   .idx_topJ_tpl, .shifts_topJ_tpl, .t_tpl (if your function times it)
%   .overlap_indices, .overlap_count
%
% Dependencies: best_match_norm.m, best_match_template.m
% Data: expects cat_###.mat files each with 50x50 variable A

    if nargin < 3 || isempty(seed), seed = 42; end

    % ---------------------------
    % Settings (edit if needed)
    % ---------------------------
    cat_folder = '/Users/lanheng/Desktop/image_similarity_2025/image_similarity/synthetic_data/cat_image';
    N          = 301;    % number of images
    m = 50; n = 50;      % image size
    query_idx  = 1;      % use cat_001 as query image

    % ---------------------------
    % Load image stack
    % ---------------------------
    image_collection = zeros(m, n, N);
    for i = 1:N
        S = load(fullfile(cat_folder, sprintf('cat_%03d.mat', i)));
        image_collection(:, :, i) = S.A;   % each MAT has 50x50 variable A
    end
    query_image = image_collection(:, :, query_idx);

    % ---------------------------
    % Template bank with fixed seed
    % ---------------------------
    rng(seed, 'twister');
    template = randn(m, n, K);

    % ---------------------------
    % Run both methods
    % ---------------------------
    t0 = tic;
    out_fft = best_match_norm(image_collection, query_image, topJ);
    t_fft = toc(t0);

    t1 = tic;
    out_tpl = best_match_template(image_collection, query_image, topJ, template);
    t_tpl = toc(t1);  % keep even if best_match_template doesn't fill timing

    % ---------------------------
    % Overlap
    % ---------------------------
    overlap = intersect(out_fft.idx_topJ, out_tpl.idx_topJ);
    overlap_count = numel(overlap);

    % ---------------------------
    % Package results
    % ---------------------------
    result = struct();
    result.idx_topJ_fft   = out_fft.idx_topJ;
    result.shifts_topJ_fft= out_fft.shifts_topJ;
    result.t_fft          = t_fft;

    result.idx_topJ_tpl   = out_tpl.idx_topJ;
    result.shifts_topJ_tpl= out_tpl.shifts_topJ;
    result.t_tpl          = t_tpl;

    result.overlap_indices = sort(overlap(:).');
    result.overlap_count   = overlap_count;

    % ---------------------------
    % Console summary
    % ---------------------------
    fprintf('\n=== K=%d, TopJ=%d ===\n', K, topJ);
    fprintf('FFT TopJ idx:    '); disp(result.idx_topJ_fft);
    fprintf('TPL TopJ idx:    '); disp(result.idx_topJ_tpl);
    fprintf('Overlap count:   %d\n', result.overlap_count);
    fprintf('Overlap indices: '); disp(result.overlap_indices);
    fprintf('Elapsed (FFT):   %.3f s\n', result.t_fft);
    fprintf('Elapsed (TPL):   %.3f s\n', result.t_tpl);
end
