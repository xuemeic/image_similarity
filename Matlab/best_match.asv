% written by Amy on 08/10/2025
% Updated by Amy on 08/15/2025
% Renamed by Amy on 08/24/2025
% Split the best_cat to two seprate functions and name 
% the direct fft correlation version as best_match.m by Amy on 08/24/2025
% Add shift detection by Amy on 08/26/2025
% Line up the variables names with the paper by Amy on 08/31/2025


function out = best_match(image_collection, query_image, topJ)
% BEST_MATCH  Baseline retrieval by direct FFT cross-correlation.
%   out = best_match(image_collection, query_image, topK)
% Inputs:
%   image_collection : m*n*N stack (each slice is a candidate image in img collection)
%   query_image      : m*n*1 query
%   topJ             : number of top matches to return
% Output:
% return in struct for clarity
%   out.scores       : 1×J peak correlation per slice
%   out.idx_topJ     : 1×topJ indices of best matches (list in descending by score)
%   out.shifts_topJ  : topJ×2 [row_shift, col_shift] (circular) to align slice to query
%   out.t_total      : elapsed time in second


[m,n,N] = size(image_collection);
topJ = min(topJ, N);

%Fq = fft2(query_image); % compute fft for query image, save as Fq
q0  = query_image - mean(query_image(:));
nq  = norm(q0(:)) + eps;
Fq  = fft2(q0);                        % FFT of zero-mean query

scores = zeros(1,N);

t0 = tic;
% 1) score each slice by peak of correlation map
for i = 1:N
    % loop through each image as Ii
    Ii = image_collection(:,:,i); 
    % zero-mean and norm of candidate
    Ii0 = Ii - mean(Ii(:));
    ni  = norm(Ii0(:)) + eps;
    % circular cross-correlation via FFT between query img and Img_i ('Ii' in collection)
    cm = ifft2( Fq .* fft2(rot90(Ii,2)));
    % find the max value of each cm and store in scores(i)
    scores(i) = max(cm, [], 'all'); 

end

% 2) pick topJ
[~, order] = sort(scores, 'descend');
idx_topJ   = order(1:topJ);

% 3) for topJ, also compute circular shifts from the argmax
shifts = zeros(topJ,2);
for t = 1:topJ
    i = idx_topJ(t); % pick the t-th best index (from 1,2...N)
    Ii = image_collection(:,:,i);
    cm = ifft2( Fq .* fft2(rot90(Ii,2)));
    % flatten cm to a vector and return the max and its index
    [~, idx] = max(cm(:)); 
    % convert linear index back into a m*n array
    [r,c] = ind2sub([m n], idx);
    % convert argmax position to circular shift 
    % to align each image in collection to query img
    row_shift = mod(m - r, m);
    col_shift = mod(n - c, n);
    shifts(t,:) = [row_shift, col_shift];
end
t_total = toc(t0);

% pack
out = struct();
out.scores      = scores;
out.idx_topJ    = idx_topJ;
out.shifts_topJ = shifts;
out.t_total     = t_total;
end
